<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>诸日无事</title>
  <icon>https://www.gravatar.com/avatar/bfe484d7d605f2619d4ea1a1473802c8</icon>
  <subtitle>不如吃酒去</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-04T07:24:52.527Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Zns</name>
    <email>0596@protonmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据类型的设计</title>
    <link href="http://example.com/2020/09/03/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2020/09/03/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-09-03T09:31:35.000Z</published>
    <updated>2020-09-04T07:24:52.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2-5-数据类型的设计"><a href="#1-2-5-数据类型的设计" class="headerlink" title="1.2.5 数据类型的设计"></a>1.2.5 数据类型的设计</h2><p><strong><em>抽象数据类型是一种向用例隐藏内部表示的数据类型</em></strong></p><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h3><p><em>使用数据类型的实现封装数据，以简化实现和隔离用例开发。封装实现了模块化编程。</em><br>模块化编程的关键在于保持模块之间的独立性。使用API作为用例和实现之间唯一的依赖点来保障这个独立性。（并不需要知道一个数据类型是如何实现才去使用它，实现数据类型时也应该假设使用者除了API之外什么也不知道。）  </p><h3 id="2-设计API"><a href="#2-设计API" class="headerlink" title="2. 设计API"></a>2. 设计API</h3><p>我们的API将是与抽象数据类型相关联的<strong>值</strong>以及一系列构造函数和实例方法的<strong>目的和副作用</strong>的<em>自然语言描述</em>。  </p><h3 id="3-算法与抽象数据类型"><a href="#3-算法与抽象数据类型" class="headerlink" title="3. 算法与抽象数据类型"></a>3. 算法与抽象数据类型</h3><p><em>数据抽象天生适合算法研究，因为它能够为我们提供一种框架，在其中能够准确地说明一个算法的目的以及其他程序应该如何使用这个算法</em><br>每个Java程序都是一组静态方法和（或）一种数据类型的的实现的集合。</p><h3 id="4-接口继承"><a href="#4-接口继承" class="headerlink" title="4. 接口继承"></a>4. 接口继承</h3><p><em>定义对象之间的关系</em><br>声明一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Datable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">month</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">day</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">year</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现中引用这个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Date</span> <span class="keyword">implements</span> <span class="title">Datable</span></span>&#123;</span><br><span class="line">    <span class="comment">//实现代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-实现继承"><a href="#5-实现继承" class="headerlink" title="5. 实现继承"></a>5. 实现继承</h3><p><em>Java的另一种继承机制——子类。</em><br>主要思想：<br>定义一个新类（<strong>子类</strong>，或称为<strong>派生类</strong>）来继承另一个类（<strong>父类</strong>，或称为<strong>基类</strong>）的所有实例方法和实例变量。子类还可以重新定义或者<strong>重写</strong>父类的方法。<br>Java中的每个类都是<code>Object</code>类的子类。所以每个类都有<code>getClass()</code>、<code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>等一些<code>Object</code>含有的方法。  </p><h3 id="6-字符串表示的习惯"><a href="#6-字符串表示的习惯" class="headerlink" title="6. 字符串表示的习惯"></a>6. 字符串表示的习惯</h3><p>每个Java类型都会从<code>Object</code>继承<code>toString()</code>方法，因此任何用例都可以调用任意对象的<code>toString()</code>方法。<br><code>toString()</code>的默认实现只会返回一个含有该对象内存地址的字符串，并无多大实用价值，因此我们通常会为我们的每个类实现并重写默认的<code>toSrting()</code>方法。</p><h3 id="7-封装类型"><a href="#7-封装类型" class="headerlink" title="7. 封装类型"></a>7. 封装类型</h3><p><em>Java提供的一些内置的引用类型</em><br>每个原始数据类型都有一个与之对应的封装类型。  </p><table><thead><tr><th align="center">封装类型</th><th align="center">Boolean</th><th align="center">Byte</th><th align="center">Character</th><th align="center">Double</th><th align="center">Float</th><th align="center">Integer</th><th align="center">Long</th><th align="center">Short</th></tr></thead><tbody><tr><td align="center">原始数据类型</td><td align="center">boolean</td><td align="center">byte</td><td align="center">character</td><td align="center">double</td><td align="center">float</td><td align="center">int</td><td align="center">long</td><td align="center">short</td></tr></tbody></table><p>在需要的时候Java会自动地把原始数据类型转化为封装类型。例如：当一个<code>int</code>值需要和一个<code>String</code>连接时，它的类型会被转化为<code>Integer</code>并触发<code>toString()</code>方法。</p><h3 id="8-等价性"><a href="#8-等价性" class="headerlink" title="8. 等价性"></a>8. 等价性</h3><p>Java约定<code>equals()</code>必须是一种等价关系。必须具有：</p><ul><li>自反性</li><li>对称性</li><li>传递性</li><li>一致性 &nbsp; 当两个对象未被修改时，反复调用<code>x.equals(y)</code>的结果总是相同的</li><li>非空性 &nbsp; <code>x.equals(null)</code>总是返回<code>false</code></li></ul><h3 id="9-内存管理"><a href="#9-内存管理" class="headerlink" title="9. 内存管理"></a>9. 内存管理</h3><p>编程语言和系统需要某种机制来在必要时刻为数据类型的<strong>值</strong>分配内存，而在不需要的时候来释放它们的内存。<br>自动内存管理是Java的特性之一，它通过记录孤儿对象并将它们的内存释放到内存池中将程序员从管理内存的责任中释放出来。这种回收机制叫做<strong>垃圾回收</strong>。</p><h3 id="10-不可变性"><a href="#10-不可变性" class="headerlink" title="10. 不可变性"></a>10. 不可变性</h3><p>不可变数据类型，例如<code>Date</code>，指的是该类型的对象中的值在创建之后就无法再被改变。与之相反，可变数据类型，例如<code>Counter</code>或<code>Accumulator</code>，能够操作并改变对象中的值。<br>Java语言通过<code>final</code>修饰符来强制保证不可变性。</p><h3 id="11-契约式设计"><a href="#11-契约式设计" class="headerlink" title="11. 契约式设计"></a>11. 契约式设计</h3><p>Java语言中能够在程序<strong>运行时</strong>检验程序状态的机制：  </p><ul><li>异常（Exception），一般用于处理不受我们控制的不可预见的错误；  </li><li>断言（Assertion），验证我们在<strong>代码</strong>中做出的一些假设  </li></ul><h3 id="12-异常与错误"><a href="#12-异常与错误" class="headerlink" title="12. 异常与错误"></a>12. 异常与错误</h3><p><strong>异常</strong>和<strong>错误</strong>都是在程序运行过程中出现的破坏性事件。Java采取的行动称为<strong>抛出异常</strong>或是<strong>抛出错误</strong>。</p><h3 id="13-断言"><a href="#13-断言" class="headerlink" title="13. 断言"></a>13. 断言</h3><p>*<strong>断言</strong>是一条需要在程序某处确认为<code>true</code>的布尔表达式*<br><em>如果表达式的值为<code>false</code>，程序将会终止并报告一条出错信息。</em><br>我们使用断言来确定程序的正确性并记录我们的意图。</p>]]></content>
    
    
    <summary type="html">对算法第四版学习的一些笔记</summary>
    
    
    
    <category term="算法第四版" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>19</title>
    <link href="http://example.com/2019/03/04/19/"/>
    <id>http://example.com/2019/03/04/19/</id>
    <published>2019-03-04T03:03:36.000Z</published>
    <updated>2020-09-04T03:10:20.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="纪两年前"><a href="#纪两年前" class="headerlink" title="纪两年前"></a>纪两年前</h2><p>曾经尝试了那么多次，都卡在了，将网页部署到github上这一步<br>原本以为这一次也要卡在这<br>虽说以前也有因为是xp系统的缘故，教程不多<br>但网上的东西还是残次不齐<br>多方对照以后有可能会更晕头转向<br>今日也算是“山重水复疑无路，柳暗花明又一村”了<br>若不是在发现路径不对时毅然重装 <del>（虽说也没花多少时间）</del><br>要不是在思考上传地址为什么不行的时候忽然想起空格没加<em>也怪不了解语法</em><br><del>谁让它这么苛刻</del></p>]]></content>
    
    
    <summary type="html">主要就是要坚持，最重要也是坚持，不忘初心</summary>
    
    
    
    <category term="闲谈" scheme="http://example.com/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="随想" scheme="http://example.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="感慨" scheme="http://example.com/tags/%E6%84%9F%E6%85%A8/"/>
    
  </entry>
  
</feed>
