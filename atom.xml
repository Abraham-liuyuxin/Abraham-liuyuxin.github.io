<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>诸日无事</title>
  <icon>https://www.gravatar.com/avatar/bfe484d7d605f2619d4ea1a1473802c8</icon>
  <subtitle>不如吃酒去</subtitle>
  <link href="https://abraham-liuyuxin.github.io/atom.xml" rel="self"/>
  
  <link href="https://abraham-liuyuxin.github.io/"/>
  <updated>2020-09-07T13:16:58.217Z</updated>
  <id>https://abraham-liuyuxin.github.io/</id>
  
  <author>
    <name>Zns</name>
    <email>0596@protonmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>背包、队列和栈(二)</title>
    <link href="https://abraham-liuyuxin.github.io/2020/09/07/%E8%83%8C%E5%8C%85%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88(%E4%BA%8C)/"/>
    <id>https://abraham-liuyuxin.github.io/2020/09/07/%E8%83%8C%E5%8C%85%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88(%E4%BA%8C)/</id>
    <published>2020-09-07T12:45:59.000Z</published>
    <updated>2020-09-07T13:16:58.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default"><p>三种数据类型——背包（Bag）、队列（Queue）和栈（Stack）  </p></div>  <h1 id="栈，队列和背包的链表实现"><a href="#栈，队列和背包的链表实现" class="headerlink" title="栈，队列和背包的链表实现"></a>栈，队列和背包的链表实现</h1><p>链表的使用达到了我们的<strong>最优设计目标</strong>：  </p><ul><li>它可以处理任意类型的数据；</li><li>所需的空间总是和集合的大小成正比；</li><li>操作所需的时间总是和集合的大小无关。  </li></ul><h2 id="下压堆栈"><a href="#下压堆栈" class="headerlink" title="下压堆栈"></a>下压堆栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Item cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node();</span><br><span class="line">        newNode.item = item;</span><br><span class="line">        newNode.next = first;</span><br><span class="line"></span><br><span class="line">        first = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Stack underflow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Item item = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//支持迭代</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StackIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StackIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> Node last;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Item cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node oldLast = last;</span><br><span class="line"></span><br><span class="line">        last = <span class="keyword">new</span> Node();</span><br><span class="line">        last.item = item;</span><br><span class="line">        last.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            first = last;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            oldLast.next = last;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Queue underflow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Item item = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Queue underflow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueueIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 背包</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        Node oldFirst = first;</span><br><span class="line">        first = <span class="keyword">new</span> Node();</span><br><span class="line">        first.item = item;</span><br><span class="line">        first.next = oldFirst;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> current != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//Not used in Bag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法第四版" scheme="https://abraham-liuyuxin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
    <category term="Java" scheme="https://abraham-liuyuxin.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://abraham-liuyuxin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://abraham-liuyuxin.github.io/2020/09/07/%E9%93%BE%E8%A1%A8/"/>
    <id>https://abraham-liuyuxin.github.io/2020/09/07/%E9%93%BE%E8%A1%A8/</id>
    <published>2020-09-07T12:26:23.000Z</published>
    <updated>2020-09-07T13:16:29.682Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><div class="note primary"><p><strong>链表</strong>是一种递归的数据结构，它或者为空(<code>null</code>)，或者指向一个<strong>结点</strong>（<code>node</code>）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。  </p></div>  <h2 id="结点记录"><a href="#结点记录" class="headerlink" title="结点记录"></a>结点记录</h2><p>用<strong>嵌套类</strong>来定义结点的抽象数据类型：  </p><pre><code class="java">private class Node&#123;    Item item;    Node next;&#125;</code></pre><p>对于这个<code>Node</code>类，我们没有定义任何方法且会在代码中直接引用实例变量，这种类型的类有时也会被称为<strong>记录</strong>。  </p><h2 id="构造链表"><a href="#构造链表" class="headerlink" title="构造链表"></a>构造链表</h2><div class="note primary"><p>链表表示的是一列元素</p></div><ul><li>首先为每个元素创造一个结点：<pre><code class="java">Node first = new Node();Node second = new Node();Node third = new Node();</code></pre></li><li>设置每个结点的<code>item</code>值（假设<code>Item</code>为<code>String</code>）：<pre><code class="java">first.item = &quot;to&quot;;second.item = &quot;be&quot;;third.item = &quot;or&quot;;</code></pre></li><li>最后设置<code>next</code>域来构建链表：  <pre><code class="java">first.next = second;second.next = third;</code></pre><div class="note info"><p><code>third.next</code>仍然是<code>null</code>，即对象创建时它被初始化的值。  </p></div>  </li></ul><p><img src="https://storage.live.com/items/2EBEB8465D8C4C1E!2418?authkey=!AOCrgXvkbYgCLpk" alt="6957f8f5-bbcf-4de2-9f4d-3f7d1cf10db9.jpg" title="用链接构建一条链表">  </p><h2 id="在表头插入结点"><a href="#在表头插入结点" class="headerlink" title="在表头插入结点"></a>在表头插入结点</h2><p>在一条链表中要插入一个新结点，在链表的开头插入最简单。  </p><pre><code class="java">Node oldfirst = first;first = new Node();first.item = &quot;not&quot;;first.next = oldfirst;</code></pre><h2 id="从表头删除结点"><a href="#从表头删除结点" class="headerlink" title="从表头删除结点"></a>从表头删除结点</h2><p>如果删除的是一条链表的<strong>首结点</strong>，只需将<code>first</code>指向<code>first.next</code>即可。<br><img src="https://storage.live.com/items/2EBEB8465D8C4C1E!2419?authkey=!AOCrgXvkbYgCLpk" alt="ec6db80e-0f33-4c4f-80e9-125fc3f7c006.jpg" title="删除链表的首结点"></p><h2 id="在表尾插入结点"><a href="#在表尾插入结点" class="headerlink" title="在表尾插入结点"></a>在表尾插入结点</h2><p>我们需要一个指向链表最后一个结点的链接，因为该结点的链接必须被修改并指向一个含有新元素的新结点。 </p><div class="note warning"><p>这段代码无法处理链表为空的情况</p></div> <pre><code class="java">Node oldlast = last;last = new Node();last.item = &quot;not&quot;;oldlast.next = last;</code></pre><h2 id="其他位置的插入和删除操作"><a href="#其他位置的插入和删除操作" class="headerlink" title="其他位置的插入和删除操作"></a>其他位置的插入和删除操作</h2><p>以下操作不像上面三个操作一样容易实现：  </p><ul><li>删除指定的结点；  </li><li>在指定结点前插入一个新结点。  </li></ul><p>实现任意插入和删除操作的标准解决方案是使用<strong>双向链表</strong>，其中每个结点都含有两个链接，分别指向不同的方向。  </p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>可以用以下循环处理链表的每个结点的代码简洁表达，其中<code>fisrt</code>指向链表的首结点：  </p><pre><code class="java">for (Node x = first, x != null; x = x.next)&#123;    //处理x.item&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法第四版" scheme="https://abraham-liuyuxin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
    <category term="Java" scheme="https://abraham-liuyuxin.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://abraham-liuyuxin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>背包、队列和栈(一)</title>
    <link href="https://abraham-liuyuxin.github.io/2020/09/05/%E8%83%8C%E5%8C%85%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88(%E4%B8%80)/"/>
    <id>https://abraham-liuyuxin.github.io/2020/09/05/%E8%83%8C%E5%8C%85%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88(%E4%B8%80)/</id>
    <published>2020-09-05T14:11:04.000Z</published>
    <updated>2020-09-07T12:49:26.970Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default"><p>三种数据类型——背包（Bag）、队列（Queue）和栈（Stack）</p></div><h2 id="背包（Bag）"><a href="#背包（Bag）" class="headerlink" title="背包（Bag）"></a>背包（Bag）</h2><p><strong>背包</strong>是一种不支持从中删除元素的集合数据类型———它的目的就是帮助用例收集元素并迭代遍历所有收集到的元素（用例也可检查背包是否为空或者获取背包中元素的数量）。迭代过程不确定并且与用例无关。</p><h2 id="先进先出队列（Queue）"><a href="#先进先出队列（Queue）" class="headerlink" title="先进先出队列（Queue）"></a>先进先出队列（Queue）</h2><p><strong>先进先出队列</strong>（或简称队列）是一种基于<strong>先进先出</strong>（FIFO）策略的集合类型。当用例使用<code>foreach</code>语句迭代访问队列中的元素时，元素的处理顺序就是它们被添加到队列中的顺序。</p><h2 id="下压栈（Stack）"><a href="#下压栈（Stack）" class="headerlink" title="下压栈（Stack）"></a>下压栈（Stack）</h2><p><strong>下压栈</strong>（或简称栈）是一种基于<strong>后进先出</strong>（LIFO）策略的集合类型。当用例使用<code>foreach</code>语句迭代访问队列中的元素时，元素的处理顺序和它们被压入栈的顺序<strong>正好相反</strong>。</p><h2 id="集合类数据类型的实现"><a href="#集合类数据类型的实现" class="headerlink" title="集合类数据类型的实现"></a>集合类数据类型的实现</h2><p><em>通过数组实现集合类数据类型</em>  </p><h3 id="算法1-1"><a href="#算法1-1" class="headerlink" title="算法1.1"></a>算法1.1</h3><p>下压（LIFO）栈（能够动态调整数组大小的实现）  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResizingArrayStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] a = (Item[]) <span class="keyword">new</span> Obeject[<span class="number">1</span>];     <span class="comment">// 栈元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;      <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;      <span class="comment">// 判断是否为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;       <span class="comment">// 获取数组中元素数目</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 改变数组长度，并迁移数组</span></span><br><span class="line"><span class="comment">    * 改变规则：</span></span><br><span class="line"><span class="comment">    * 当数组内元素数目达到最大容量时，将数组长度加倍</span></span><br><span class="line"><span class="comment">    * 当数组内元素数目小于数组的四分之一时，将数组长度减半</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123; <span class="comment">// 将栈转移到一个数组大小为capacity的新数组</span></span><br><span class="line">        <span class="keyword">assert</span> capacity &gt;= N;</span><br><span class="line">        Item[] temp = (Item[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            temp[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123; <span class="comment">// 将元素添加到栈顶</span></span><br><span class="line">        <span class="keyword">if</span> (N == a.length) resize(<span class="number">2</span>*a.length);    </span><br><span class="line">        a[N++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123; <span class="comment">// 从栈顶删除元素</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Stack underflow&quot;</span>);</span><br><span class="line">        Item item = a[N-<span class="number">1</span>];</span><br><span class="line">        a[N-<span class="number">1</span>] = <span class="keyword">null</span>;      <span class="comment">// 避免对象游离</span></span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">if</span> (N &gt; <span class="number">0</span> &amp;&amp; N == a.length/<span class="number">4</span>) resize(a.length/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReverseArrayIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseArrayIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123; <span class="comment">//支持先进后出的迭代</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ReverseArrayIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            i = N-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i &gt;= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> a[i--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>Item</code>是一个<strong>类型参数</strong>，用于表示用例将会使用的某种具体类型的象征性的占位符。<br>这其中有一个细节，创建一个泛型的数组：<br><del><code>a = new Item[cap];</code></del><br>由于某些历史和技术原因，<font color="ecb861"><strong>创建泛型数组在Java中是不允许的</strong></font>。我们需要使用类型转换：<br><code>a = (Item[]) new Object[cap];</code></p></li><li><p>对象游离（1.3.2.4）<br>Java的垃圾收集策略是回收所有无法被访问的对象的内存。当保存一个不需要的对象的引用时，称为<strong>游离</strong>。<br>在上面的代码中，只需要将被弹出的数组元素的值设为<code>null</code>即可，这将覆盖无用的引用并使系统可以在用例使用完被弹出的元素后回收它的内存。</p></li><li><p>迭代（1.3.2.5）  </p></li><li><p>集合类数据类型的基本操作之一就是，能够使用Java的<code>foreach</code>语句通过<strong>迭代</strong>遍历并处理集合中的每个元素。*</p><ul><li>集合数据类型必须实现一个<code>iterator()</code>方法并返回一个<code>Iterator</code>对象；</li><li><code>Iterator</code>类必须包含两个方法：<code>hasNext()</code>（返回一个布尔值）和<code>next()</code>（返回集合中的一个泛型元素）。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">关于三种集合数据类型——背包、队列和栈的介绍，以及java中泛型和迭代的相关知识。</summary>
    
    
    
    <category term="算法第四版" scheme="https://abraham-liuyuxin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
    <category term="Java" scheme="https://abraham-liuyuxin.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://abraham-liuyuxin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>习题1.2——数据抽象</title>
    <link href="https://abraham-liuyuxin.github.io/2020/09/05/%E4%B9%A0%E9%A2%981-2%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/"/>
    <id>https://abraham-liuyuxin.github.io/2020/09/05/%E4%B9%A0%E9%A2%981-2%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</id>
    <published>2020-09-05T14:10:16.000Z</published>
    <updated>2020-09-05T14:43:57.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据抽象习题"><a href="#数据抽象习题" class="headerlink" title="数据抽象习题"></a>数据抽象习题</h2><h3 id="1-2-6"><a href="#1-2-6" class="headerlink" title="1.2.6"></a>1.2.6</h3><p>如果字符串s中的字符串循环移动任意位置之后能够得到另一个字符串t，那么s就被称为t的回环变位（circular rotation）。例如：ACTGACG就是TGACGAC的一个回环变位，反之亦然。编写一个程序检查两个给定的字符串是否互为回环变位。（tips: 只需要一行用到<code>indexOf()</code>、<code>length()</code>和字符串连接的代码。）<br>Answer:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//One liner solution - does not safe check for null values</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCircularShift</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.length() == t.length() &amp;&amp; (s+s).contains(t);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-7"><a href="#1-2-7" class="headerlink" title="1.2.7"></a>1.2.7</h3><p>以下递归函数的返回值是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mystery</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = s.length();</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">String a = s.substring(<span class="number">0</span>, n/<span class="number">2</span>);</span><br><span class="line">String b = s.substring(n/<span class="number">2</span>, n);</span><br><span class="line"><span class="keyword">return</span> mystery(b) + mystery(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Answer：<br>Returns the opposite String.<br>Example: mystery(“teste”) returns etset</p><p><font size=1>参考自：<a href="https://github.com/reneargento/algorithms-sedgewick-wayne">algorithms-sedgewick-wayne</a></font></p>]]></content>
    
    
    <summary type="html">算法习题部分解答，参考自algorithms-sedgewick-wayne</summary>
    
    
    
    <category term="算法第四版" scheme="https://abraham-liuyuxin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
    <category term="习题" scheme="https://abraham-liuyuxin.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
    <category term="Java" scheme="https://abraham-liuyuxin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据类型的设计</title>
    <link href="https://abraham-liuyuxin.github.io/2020/09/03/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>https://abraham-liuyuxin.github.io/2020/09/03/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-09-03T09:31:35.000Z</published>
    <updated>2020-09-05T14:23:26.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-2-5-数据类型的设计"><a href="#1-2-5-数据类型的设计" class="headerlink" title="1.2.5 数据类型的设计"></a>1.2.5 数据类型的设计</h2><p><strong><em>抽象数据类型是一种向用例隐藏内部表示的数据类型</em></strong></p><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h3><p><em>使用数据类型的实现封装数据，以简化实现和隔离用例开发。封装实现了模块化编程。</em><br>模块化编程的关键在于保持模块之间的独立性。使用API作为用例和实现之间唯一的依赖点来保障这个独立性。（并不需要知道一个数据类型是如何实现才去使用它，实现数据类型时也应该假设使用者除了API之外什么也不知道。）  </p><h3 id="2-设计API"><a href="#2-设计API" class="headerlink" title="2. 设计API"></a>2. 设计API</h3><p>我们的API将是与抽象数据类型相关联的<strong>值</strong>以及一系列构造函数和实例方法的<strong>目的和副作用</strong>的<em>自然语言描述</em>。  </p><h3 id="3-算法与抽象数据类型"><a href="#3-算法与抽象数据类型" class="headerlink" title="3. 算法与抽象数据类型"></a>3. 算法与抽象数据类型</h3><p><em>数据抽象天生适合算法研究，因为它能够为我们提供一种框架，在其中能够准确地说明一个算法的目的以及其他程序应该如何使用这个算法</em><br>每个Java程序都是一组静态方法和（或）一种数据类型的的实现的集合。</p><h3 id="4-接口继承"><a href="#4-接口继承" class="headerlink" title="4. 接口继承"></a>4. 接口继承</h3><p><em>定义对象之间的关系</em><br>声明一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Datable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">month</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">day</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">year</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现中引用这个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Date</span> <span class="keyword">implements</span> <span class="title">Datable</span></span>&#123;</span><br><span class="line">    <span class="comment">//实现代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-实现继承"><a href="#5-实现继承" class="headerlink" title="5. 实现继承"></a>5. 实现继承</h3><p><em>Java的另一种继承机制——子类。</em><br>主要思想：<br>定义一个新类（<strong>子类</strong>，或称为<strong>派生类</strong>）来继承另一个类（<strong>父类</strong>，或称为<strong>基类</strong>）的所有实例方法和实例变量。子类还可以重新定义或者<strong>重写</strong>父类的方法。<br>Java中的每个类都是<code>Object</code>类的子类。所以每个类都有<code>getClass()</code>、<code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>等一些<code>Object</code>含有的方法。  </p><h3 id="6-字符串表示的习惯"><a href="#6-字符串表示的习惯" class="headerlink" title="6. 字符串表示的习惯"></a>6. 字符串表示的习惯</h3><p>每个Java类型都会从<code>Object</code>继承<code>toString()</code>方法，因此任何用例都可以调用任意对象的<code>toString()</code>方法。<br><code>toString()</code>的默认实现只会返回一个含有该对象内存地址的字符串，并无多大实用价值，因此我们通常会为我们的每个类实现并重写默认的<code>toSrting()</code>方法。</p><h3 id="7-封装类型"><a href="#7-封装类型" class="headerlink" title="7. 封装类型"></a>7. 封装类型</h3><p><em>Java提供的一些内置的引用类型</em><br>每个原始数据类型都有一个与之对应的封装类型。  </p><table><thead><tr><th align="center">封装类型</th><th align="center">Boolean</th><th align="center">Byte</th><th align="center">Character</th><th align="center">Double</th><th align="center">Float</th><th align="center">Integer</th><th align="center">Long</th><th align="center">Short</th></tr></thead><tbody><tr><td align="center">原始数据类型</td><td align="center">boolean</td><td align="center">byte</td><td align="center">character</td><td align="center">double</td><td align="center">float</td><td align="center">int</td><td align="center">long</td><td align="center">short</td></tr></tbody></table><p>在需要的时候Java会自动地把原始数据类型转化为封装类型。例如：当一个<code>int</code>值需要和一个<code>String</code>连接时，它的类型会被转化为<code>Integer</code>并触发<code>toString()</code>方法。</p><h3 id="8-等价性"><a href="#8-等价性" class="headerlink" title="8. 等价性"></a>8. 等价性</h3><p>Java约定<code>equals()</code>必须是一种等价关系。必须具有：</p><ul><li>自反性</li><li>对称性</li><li>传递性</li><li>一致性 &nbsp; 当两个对象未被修改时，反复调用<code>x.equals(y)</code>的结果总是相同的</li><li>非空性 &nbsp; <code>x.equals(null)</code>总是返回<code>false</code></li></ul><h3 id="9-内存管理"><a href="#9-内存管理" class="headerlink" title="9. 内存管理"></a>9. 内存管理</h3><p>编程语言和系统需要某种机制来在必要时刻为数据类型的<strong>值</strong>分配内存，而在不需要的时候来释放它们的内存。<br>自动内存管理是Java的特性之一，它通过记录孤儿对象并将它们的内存释放到内存池中将程序员从管理内存的责任中释放出来。这种回收机制叫做<strong>垃圾回收</strong>。</p><h3 id="10-不可变性"><a href="#10-不可变性" class="headerlink" title="10. 不可变性"></a>10. 不可变性</h3><p>不可变数据类型，例如<code>Date</code>，指的是该类型的对象中的值在创建之后就无法再被改变。与之相反，可变数据类型，例如<code>Counter</code>或<code>Accumulator</code>，能够操作并改变对象中的值。<br>Java语言通过<code>final</code>修饰符来强制保证不可变性。</p><h3 id="11-契约式设计"><a href="#11-契约式设计" class="headerlink" title="11. 契约式设计"></a>11. 契约式设计</h3><p>Java语言中能够在程序<strong>运行时</strong>检验程序状态的机制：  </p><ul><li>异常（Exception），一般用于处理不受我们控制的不可预见的错误；  </li><li>断言（Assertion），验证我们在<strong>代码</strong>中做出的一些假设  </li></ul><h3 id="12-异常与错误"><a href="#12-异常与错误" class="headerlink" title="12. 异常与错误"></a>12. 异常与错误</h3><p><strong>异常</strong>和<strong>错误</strong>都是在程序运行过程中出现的破坏性事件。Java采取的行动称为<strong>抛出异常</strong>或是<strong>抛出错误</strong>。</p><h3 id="13-断言"><a href="#13-断言" class="headerlink" title="13. 断言"></a>13. 断言</h3><p>*<strong>断言</strong>是一条需要在程序某处确认为<code>true</code>的布尔表达式*<br><em>如果表达式的值为<code>false</code>，程序将会终止并报告一条出错信息。</em><br>我们使用断言来确定程序的正确性并记录我们的意图。</p>]]></content>
    
    
    <summary type="html">对算法第四版学习的一些笔记</summary>
    
    
    
    <category term="算法第四版" scheme="https://abraham-liuyuxin.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
    <category term="Java" scheme="https://abraham-liuyuxin.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://abraham-liuyuxin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>19</title>
    <link href="https://abraham-liuyuxin.github.io/2019/03/04/19/"/>
    <id>https://abraham-liuyuxin.github.io/2019/03/04/19/</id>
    <published>2019-03-04T03:03:36.000Z</published>
    <updated>2020-09-04T03:10:20.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="纪两年前"><a href="#纪两年前" class="headerlink" title="纪两年前"></a>纪两年前</h2><p>曾经尝试了那么多次，都卡在了，将网页部署到github上这一步<br>原本以为这一次也要卡在这<br>虽说以前也有因为是xp系统的缘故，教程不多<br>但网上的东西还是残次不齐<br>多方对照以后有可能会更晕头转向<br>今日也算是“山重水复疑无路，柳暗花明又一村”了<br>若不是在发现路径不对时毅然重装 <del>（虽说也没花多少时间）</del><br>要不是在思考上传地址为什么不行的时候忽然想起空格没加<em>也怪不了解语法</em><br><del>谁让它这么苛刻</del></p>]]></content>
    
    
    <summary type="html">主要就是要坚持，最重要也是坚持，不忘初心</summary>
    
    
    
    <category term="闲谈" scheme="https://abraham-liuyuxin.github.io/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="随想" scheme="https://abraham-liuyuxin.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="感慨" scheme="https://abraham-liuyuxin.github.io/tags/%E6%84%9F%E6%85%A8/"/>
    
  </entry>
  
</feed>
